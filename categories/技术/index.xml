<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 19 Dec 2019 20:51:28 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue完整版和非完整版</title>
      <link>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</link>
      <pubDate>Thu, 19 Dec 2019 20:51:28 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</guid>
      <description>Vue有两个版本，完整版和非完整版，非完整版也称为运行时版本。 完整版的文件名为：vue.js；非完整版的文件名为vue.runtime.js；这两个文件里面包含了注释。 如果是在生产环境，我们可以使用vue.min.js和vue.runtime.min.js，这是完整版和非完整版去除了注释以及压缩后的版本，相对于原来体积会变小。
完整版 VS 非完整版 完整版 = 运行时 + 编译器compiler
由于编译器的存在，完整版比运行时版本体积大40%左右。
编译器干嘛的？？
完整版Vue内置了编译器，它可以直接从HTML获取元素，得到视图。
比如
new Vue({ el:&#39;#app&#39; })  就可以得到这个HTML中id为app的节点，
或者通过template
new Vue({ el:&#39;#app&#39;, template:` &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt; `, data:{ n:0 } })  如果使用非完整版，我们要使用JS构建视图，在render函数里面用h创建标签。
比如：
new Vue({ el:&#39;#app&#39;, render(h){ return h(&#39;div&#39;,this.n) }, data:{ n:0 } })  h相当于createElement，render函数返回了一个div节点，里面的内容是n。
如果再复杂一点，比如加一个可以&amp;rdquo;+1&amp;rdquo;的按钮？
new Vue({ el:&#39;#app&#39;, render(h){ return h(&#39;div&#39;,[this.n,h(&#39;button&#39;,{on:{click:this.add}},&#39;1&#39;)]) }, data:{ n:0 }, methods:{ add(){ this.n += 1 } } })  这看上去就不是很友善了，那我们每次都要用这么麻烦的render吗？</description>
    </item>
    
    <item>
      <title>MVC:拒绝面条式代码</title>
      <link>https://chow1027.xyz/2019/mvc/</link>
      <pubDate>Sat, 14 Dec 2019 19:08:42 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/mvc/</guid>
      <description>设计模式概述 设计模式是我们在进行程序设计的过程中，对普遍存在的问题（或反复出现的情况）提出的一种统一的解决方案。 比如适配器模式、Promise、重载、别名、getter/setter、观察者模式等。
代码模块化 如果代码中存在一些可以具体实现某些功能的代码块，而这些代码块的功能在其他的地方也可以适用。那么我们可以将这部分代码可以封装成一个函数、一个类，这就是代码的模块化；
根据操作对象的不同，比如将专门操作DOM对象的代码放在一类，将专门负责页面渲染更新的代码当在一类，这也是代码的模块化。
就是说，总是会有&amp;rdquo;万金油&amp;rdquo;的代码，是所有项目或块的通用代码，我们将这些具有相同&amp;rdquo;目的&amp;rdquo;的代码整合成一个模块，就可以使代码的整体结构更加清晰；模块之间虽然有联系，但每个模块只需关注自身的执行情况以及传进来的参数即可，不会牵一发而动全身，这也是一种解耦的思想。
MVC 设计模式 MVC 是设计模式的一种，是我们优化代码结构的一种方案。同时，他也是代码模块化的一种体现。
它不直接指导具体代码的实现，而是从全局的、宏观的角度，指导各个部分的代码应该怎么“摆”，从而使代码整体结构更加规律、直观。 当需求越是复杂，要实现的功能越复杂的时候，MVC 所带来的好处就越明显。
MVC 把代码的结构分成三个部分：Model-数据、View-视图、Control-控制器。
Model 数据 Model 负责代码中的所有与数据相关的部分，比如数据的更新、数据的读取、数据的存储等。 它不依赖于 View 和 Control，也就是说，它并不关心数据会被如何显示，或是被如何处理，它只需要管理好它的数据即可。 以下面的 Model 举例:
class Model{ constructor(options){ // 接受数据 const keys = [&#39;data&#39;,&#39;update&#39;,&#39;create&#39;,&#39;delete&#39;,&#39;get&#39;] keys.forEach((key)=&amp;gt;{ if(key in options){ this[key]=options[key] } }) } // 各种数据相关的方法 create(){} delete(){} update(){} get(){} }  View 视图 View 负责处理用户界面相关的代码，比如页面的重新渲染。 同样，View 并不关心它渲染的内容，它只要做好它的工作就可以了。 以下面的 代码 举例:
const view = { init(){} // 页面初始化 template:`&amp;lt;section&amp;gt;&amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;&amp;lt;/section&amp;gt;` // 页面要渲染的内容 render(){} // 渲染函数 }  Controller 控制器 Controller负责统筹整个程序的运作，类似中央处理器。 比如对Model的数据进行处理，将处理后的数据通知给 View 更新；处理 View 传达的事件，更新数据后传达给 Model。 以下面的 Controller 举例:</description>
    </item>
    
  </channel>
</rss>