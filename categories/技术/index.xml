<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Dec 2019 20:56:13 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue:数据响应式</title>
      <link>https://chow1027.xyz/2019/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Fri, 20 Dec 2019 20:56:13 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>前言 先说两个基本的认识 响应式：若某个东西能对外界的变化(刺激)做出反应，那么他就是响应式的。
比如响应式页面，就是当我们改变窗口的大小时，网页内容会根据窗口的大小做出反应(调整)的页面。 数据响应式： Vue的data是响应式的。比如const vm = new Vue({data:{n:0}})，
如果修改vm.n(或data.n)，那么页面中的n就会作出响应，渲染为对应的n或者经过一些数据处理后的n。这就是响应式
Vue2 通过 Object.defineProperty 实现数据响应式。 接下来，理解下面两个ES6语法，有助于本文的阅读。
1. getter/setter
现有如下对象
let obj = { firstName:&amp;#39;张&amp;#39;, lastName:&amp;#39;三&amp;#39;, name(){ return this.firstName + this.lastName } } console.log(obj.name()) // 张三 通过调用obj的name函数就可以得到这个对象的姓名。
 getter/setter  let obj = { firstName:&amp;#39;张&amp;#39;, lastName:&amp;#39;三&amp;#39;, get name(){ return this.firstName + this.lastName }, set name(arr){ this.firstName = arr[0] this.lastName = arr.substring(1) } } console.log(obj.name) obj.name = &amp;#39;李四&amp;#39; console.log(obj.name) // 张三 // 李四 使用get方法和set方法，name不再是一个函数，它是一个计算属性，它的值是以函数的形式定义的。 当我们调用name的时候，就可以通过get得到name这个属性计算的值。比如本例中计算的值就是姓名：&amp;ldquo;张三&amp;rdquo; 当我们给name赋值的时候，就可以通过set进行赋值，比如本例中的&amp;quot;李四&amp;quot;就是重新赋值的结果。</description>
    </item>
    
    <item>
      <title>如何理解Vue的.Sync修饰符</title>
      <link>https://chow1027.xyz/2019/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 20 Dec 2019 20:56:13 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>有时候我们可能需要对一个prop进行双向绑定，但真正的双向绑定会带来维护上的问题。
因为子组件可以修改父组件，且在子组件和父组件都没有明显的改动来源。
因此Vue推荐以update:myPropName的模式触发事件取代双向绑定。
具体做法就是：首先在子组件中用$emit传递参数。 &amp;quot;update:title&amp;quot;是事件名，newTitle是传递给父组件的参数。// 子组件 this.$emit(&amp;#39;update:title&amp;#39;,newTitle) 然后在父组件监听&amp;quot;update:title&amp;quot;事件，根据需要更新父组件上的数据属性。
// 父组件 &amp;lt;text-document v-bind:title=&amp;#34;doc.title&amp;#34; v-on:update:title=&amp;#34;doc.title=$event&amp;#34;&amp;gt; &amp;lt;/text-document&amp;gt; 上面的模式很常见，于是Vue给这种模式提供给了缩写，就是.sync修饰符。
// 父组件 &amp;lt;text-document :title.sync=&amp;#34;doc.title&amp;#34;&amp;gt;&amp;lt;/text-document&amp;gt; // 相当于 //&amp;lt;text-document // v-bind:title=&amp;#34;doc.title&amp;#34; // v-on:update:title=&amp;#34;doc.title=$event&amp;#34;&amp;gt; //&amp;lt;/text-document&amp;gt; 当我们需要在子组件上修改props传递的数据时，不能直接修改，而是要通过.sync修饰符，通知父组件修改。
案例 比如设想一个这样的场景：爸爸给儿子钱，儿子要花钱。
父亲组件
首先，爸爸要告诉儿子自己有多少钱（用v-bind:），同时爸爸要儿子在花完钱之后(v-on:&amp;lsquo;儿子花钱事件&amp;rsquo;)，把余额还给自己(用$event)
&amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;father&amp;#34;&amp;gt; 我现在有 {{fatherMoney}} &amp;lt;/div&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;Child :money=&amp;#34;fatherMoney&amp;#34; v-on:update:money=&amp;#34;fatherMoney = $event&amp;#34; /&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Child from &amp;#34;./Child.vue&amp;#34;; export default{ data(){ return {fatherMoney:10000}; }, components:{Child:Child} }; &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .father { border:3px solid red; padding:10px; } &amp;lt;/style&amp;gt;  &amp;lt;Child :money=&amp;quot;fatherMoney&amp;quot; v-on:update:money=&amp;quot;fatherMoney = $event&amp;quot; /&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue:完整版和非完整版</title>
      <link>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</link>
      <pubDate>Thu, 19 Dec 2019 20:51:28 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</guid>
      <description>Vue有两个版本，完整版和非完整版，非完整版也称为运行时版本。 完整版的文件名为：vue.js；非完整版的文件名为vue.runtime.js；这两个文件里面包含了注释。 如果是在生产环境，我们可以使用vue.min.js和vue.runtime.min.js，这是完整版和非完整版去除了注释以及压缩后的版本，相对于原来体积会变小。
完整版 VS 非完整版 完整版 = 运行时 + 编译器compiler
由于编译器的存在，完整版比运行时版本体积大40%左右。
编译器干嘛的？？
完整版Vue内置了编译器，它可以直接从HTML获取元素，得到视图。
比如
new Vue({ el:&amp;#39;#app&amp;#39; }) 就可以得到这个HTML中id为app的节点，
或者通过template
new Vue({ el:&amp;#39;#app&amp;#39;, template:` &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt; `, data:{ n:0 } }) 如果使用非完整版，我们要使用JS构建视图，在render函数里面用h创建标签。
比如：
new Vue({ el:&amp;#39;#app&amp;#39;, render(h){ return h(&amp;#39;div&amp;#39;,this.n) }, data:{ n:0 } }) h相当于createElement，render函数返回了一个div节点，里面的内容是n。
如果再复杂一点，比如加一个可以&amp;quot;+1&amp;quot;的按钮？
new Vue({ el:&amp;#39;#app&amp;#39;, render(h){ return h(&amp;#39;div&amp;#39;,[this.n,h(&amp;#39;button&amp;#39;,{on:{click:this.add}},&amp;#39;1&amp;#39;)]) }, data:{ n:0 }, methods:{ add(){ this.n += 1 } } }) 这看上去就不是很友善了，那我们每次都要用这么麻烦的render吗？
还好，vue提供了vue-loader，我们可以创建一个.vue文件，它的格式如下：
&amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;red&amp;#34;&amp;gt; {{n}} &amp;lt;button @click=&amp;#34;add&amp;#34;&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { n: 0 }; }, methods: { add() { this.</description>
    </item>
    
    <item>
      <title>MVC:拒绝面条式代码</title>
      <link>https://chow1027.xyz/2019/mvc/</link>
      <pubDate>Sat, 14 Dec 2019 19:08:42 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/mvc/</guid>
      <description>设计模式概述 设计模式是我们在进行程序设计的过程中，对普遍存在的问题（或反复出现的情况）提出的一种统一的解决方案。 比如适配器模式、Promise、重载、别名、getter/setter、观察者模式等。
代码模块化 如果代码中存在一些可以具体实现某些功能的代码块，而这些代码块的功能在其他的地方也可以适用。那么我们可以将这部分代码可以封装成一个函数、一个类，这就是代码的模块化；
根据操作对象的不同，比如将专门操作DOM对象的代码放在一类，将专门负责页面渲染更新的代码当在一类，这也是代码的模块化。
就是说，总是会有&amp;quot;万金油&amp;quot;的代码，是所有项目或块的通用代码，我们将这些具有相同&amp;quot;目的&amp;quot;的代码整合成一个模块，就可以使代码的整体结构更加清晰；模块之间虽然有联系，但每个模块只需关注自身的执行情况以及传进来的参数即可，不会牵一发而动全身，这也是一种解耦的思想。
MVC 设计模式 MVC 是设计模式的一种，是我们优化代码结构的一种方案。同时，他也是代码模块化的一种体现。
它不直接指导具体代码的实现，而是从全局的、宏观的角度，指导各个部分的代码应该怎么“摆”，从而使代码整体结构更加规律、直观。 当需求越是复杂，要实现的功能越复杂的时候，MVC 所带来的好处就越明显。
MVC 把代码的结构分成三个部分：Model-数据、View-视图、Control-控制器。
Model 数据 Model 负责代码中的所有与数据相关的部分，比如数据的更新、数据的读取、数据的存储等。 它不依赖于 View 和 Control，也就是说，它并不关心数据会被如何显示，或是被如何处理，它只需要管理好它的数据即可。 以下面的 Model 举例:
class Model{ constructor(options){ // 接受数据  const keys = [&amp;#39;data&amp;#39;,&amp;#39;update&amp;#39;,&amp;#39;create&amp;#39;,&amp;#39;delete&amp;#39;,&amp;#39;get&amp;#39;] keys.forEach((key)=&amp;gt;{ if(key in options){ this[key]=options[key] } }) } // 各种数据相关的方法  create(){} delete(){} update(){} get(){} } View 视图 View 负责处理用户界面相关的代码，比如页面的重新渲染。 同样，View 并不关心它渲染的内容，它只要做好它的工作就可以了。 以下面的 代码 举例:
const view = { init(){} // 页面初始化  template:`&amp;lt;section&amp;gt;&amp;lt;p&amp;gt;hello&amp;lt;/p&amp;gt;&amp;lt;/section&amp;gt;` // 页面要渲染的内容  render(){} // 渲染函数 } Controller 控制器 Controller负责统筹整个程序的运作，类似中央处理器。 比如对Model的数据进行处理，将处理后的数据通知给 View 更新；处理 View 传达的事件，更新数据后传达给 Model。 以下面的 Controller 举例:</description>
    </item>
    
  </channel>
</rss>