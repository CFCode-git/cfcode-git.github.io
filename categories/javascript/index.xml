<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/categories/javascript/</link>
    <description>Recent content in JavaScript on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 16 Apr 2020 10:04:56 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数组扁平化的方法</title>
      <link>https://chow1027.xyz/2020/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 16 Apr 2020 10:04:56 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2020/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>数组扁平化 将数组[1,[2,3,[4,[5]]]]变成[1,2,3,4,5]就是数组扁平化。
方法一 es6 的新 api flat(depth) depth 默认是 1。
let a = [1, [2, 3, [4, [5]]]]; a.flat(); // [1, 2, 3, Array(2)] a.flat(4 - 1); // [1, 2, 3, 4, 5] 方法二 for 循环+concat let a = [1, [2, 3, [4, [5]]]]; function flatten(array) { let result = []; for (let i = 0; i &amp;lt; array.length; i++) { if (Array.isArray(array[i])) { result = result.concat(flatten(array[i])); } else { result.</description>
    </item>
    
    <item>
      <title>关于跨域的两种解决方案</title>
      <link>https://chow1027.xyz/2020/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Tue, 14 Apr 2020 17:33:54 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2020/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>浏览器为了保护用户隐私，设计了同源策略。即：不同源的页面之间不能互相访问数据。
什么是同源？即相同的协议、域名和端口号。
有时候我们需要获取别的网站的数据，这时候就需要用到跨域。这里主要说两种解决方案。
一、CORS 跨域资源共享 如果浏览器支持 CORS 就很简单。只需要后台在响应头里面设置一下即可：
response.setHeader(&amp;#34;Access-Control-Allow-Orogin&amp;#34;, &amp;#34;http:example.com:9999&amp;#34;); 不过 CORS 并不支持 IE6 7 8 9。。
如果需要兼容 IE，我们可以用 JSONP。
二、JSONP 虽说数据不能跨域，但 JS 文件是没有同源的限制的。我们大可把数据放到 JS 文件中。
具体怎么做呢？
首先，提供数据的一方需要做的是：
  将数据写到 JS 文件里。比如【data.js】
// 可以是赋值，也可以是函数  window[&amp;#39;{{xxx}}&amp;#39;]({{data}})   在收到这个 data.js 的请求的时候，获取 data.json 的数据，替换{{data}}；
  用 query 获取请求的参数【一般放在 callback 里面，是回调函数名。】用来替换{{xxx}}。
  然后将替换后的结果返回出去即可。
  else if(path=&amp;#34;/data.js&amp;#34;){ response.statusCode = 200; response.setHeader(&amp;#39;Content-Type&amp;#39;,&amp;#39;text/javascript;charset=utf-8&amp;#39;) const string = fs.readFileSync(&amp;#39;./public/friends.js&amp;#39;).toString() const data = fs.readFileSync(&amp;#39;./public/friends.json&amp;#39;).toString() /* 真正的数据 */ const string2 = string.</description>
    </item>
    
    <item>
      <title>尝试理解闭包</title>
      <link>https://chow1027.xyz/2020/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sat, 04 Apr 2020 22:04:18 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2020/%E9%97%AD%E5%8C%85/</guid>
      <description>一些文章 我从来不理解 JavaScript 闭包，直到有人这样向我解释它&amp;hellip;
理解 JavaScript 中的闭包
什么是闭包？闭包的优缺点？
js 中闭包的理解、用途场景、优缺点及解决办法
一些概念 执行上下文
调用上下文
定义时上下文，运行时上下文
什么是闭包？闭包的用途是什么？闭包的缺点是什么？ 理解闭包是什么，我们先理解 JavaScript 的链式作用域：
在函数定义的时候就创建了链式作用域。
它的规则是：把函数本身的变量优先级放在最前面，把自身的父级函数中的变量放在其次，在把高一级函数中的变量放在更后面，依次类推直到全局变量为止。
当这个函数需要某个变量的时候，会沿着链式作用域逐级寻找，并在找到的里函数最近的一级停下，如果找不到就会返回 undefined。
由于链式作用域的机制，会导致： 一个函数可以读取函数外部的变量，但在函数外部无法读取函数内部的变量。
而当一个函数访问了函数外部的变量时，我们称这个函数和变量构成了闭包。
function father() { let a = 100; function children() { console.log(a); } return children; } let child = father(); child(); // 100 执行上述代码，首先会调用 father 函数，调用的结果是返回一个 children 函数的定义给变量 child。
执行变量 child 中的 children 函数的定义（也就是 children 函数{}包裹的代码块），执行过程中要打印 a，children。
函数中没有 a 的定义，因此会沿着链式作用域向上级寻找，打印了 father 函数下的 a。
换种方式理解，闭包包含了函数本身以及函数被创建时所处的环境（这里的环境是指函数创建时所在作用域的所有变量）。
上述代码中，传递给 child 的除了 children 的函数定义以外，还携带了 children 在被创建时的环境（也就是 let a = 100）。</description>
    </item>
    
    <item>
      <title>四种数组去重的方法</title>
      <link>https://chow1027.xyz/2020/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Wed, 05 Feb 2020 23:53:58 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2020/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>如何实现数组去重？ 假设有数组 array = [1,5,2,3,4,2,3,1,3,4] 写一个 unique 函数去重
ES6 set 去重（ES6 中最常用） function unique(arr) { return Array.from(new Set(arr)); } let array = [1, 5, 2, 3, 4, 2, 3, 1, 3, 4]; console.log(unique(array)); // [1, 5, 2, 3, 4] 缺点：这个方法不能去掉重复的空数组{}。
var arr = [1,1,&#39;true&#39;,&#39;true&#39;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#39;NaN&#39;, 0, 0, &#39;a&#39;, &#39;a&#39;,{},{}]; console.log(unique(arr)) // [1, &amp;quot;true&amp;quot;, true, 15, false, undefined, null, NaN, &amp;quot;NaN&amp;quot;, 0, &amp;quot;a&amp;quot;, {}, {}] 利用 Map 数据结构 function unique(array) { let hashMap = new Map(); // 用于判别是否重复  let result = new Array(); // 用于返回结果  for (let i = 0; i &amp;lt; array.</description>
    </item>
    
    <item>
      <title>变量声明：let、const、var</title>
      <link>https://chow1027.xyz/2019/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Sat, 28 Dec 2019 16:08:31 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</guid>
      <description>a = 1 var a = 1 let a = 1 const a = 1 a = 1 var a // a1 全局变量 function fn(){ var a // a2 局部变量  function fn2(){ a = 1 // 如果没有a1 a2，就声明一个全局变量a  // 如果没有a1，就用a2  // 如果没有a2.就用a1  // 如果a1 a2都有，就近原则，用a2  } } 如果当前有a，就直接利用这个a，如果当前没有a，就声明一个全局变量a。
变量提升 function fn(){ // {{a}}  if(true){ console.log(a) }else{ // 这里不会执行  var a = 1 console.log(2) } } // undefined 代码没有报错，原因是var会变量提升。它最终会提到{{a}}的位置中去。</description>
    </item>
    
    <item>
      <title>事件流与事件委托</title>
      <link>https://chow1027.xyz/2019/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Sun, 08 Dec 2019 19:43:20 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>事件流 事件流就是页面中的元素接受事件的顺序。
可以分为事件冒泡流、事件捕获流。
事件冒泡流 &amp;amp;&amp;amp; 事件捕获流 事件冒泡流是从事件开始的具体元素，逐级往上传播到较为不具体的节点。
最外面的节点是 window！！！！
比如
&amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;here&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; 当点击 p 元素时，事件冒泡流的传播顺序是：
p &amp;gt; div &amp;gt; body &amp;gt; html &amp;gt; document &amp;gt; window
事件捕获流与事件冒泡流恰好相反，它的传播顺序是：
window &amp;gt; document &amp;gt; html &amp;gt; body &amp;gt; div &amp;gt; p
在事件到达预定目标之前捕获它。
DOM 二级事件 DOM 二级事件规定：事件流分为三个阶段：事件捕获阶段，处于目标阶段，事件冒泡阶段。
首先发生事件捕获，事件在到达目标后停止。 然后是处于目标，事件在目标上发生，并在事件处理中被看成是冒泡阶段的一部分，最后事件再冒泡传播至 document。
什么是事件委托？ 每一个函数都是一个对象，都会占用内存。内存中的对象越多，性能就越差，事件处理程序过多的解决方案就是事件委托。
把原本需要绑定在子元素的响应事件委托给它的父元素，让父元素承担监听事件的任务。
事件委托的原理就是利用了事件冒泡。
比如有这么个结构：div &amp;gt; ul &amp;gt; li &amp;gt; a，我们可以给 div 添加点击事件，那么当 div 中的 ul、li、a 做点击事件的时候，会冒泡到最外层的 div，触发 div 上的点击事件。
举例说明：</description>
    </item>
    
    <item>
      <title>Promise</title>
      <link>https://chow1027.xyz/2019/promise/</link>
      <pubDate>Sun, 08 Dec 2019 12:26:39 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/promise/</guid>
      <description>Promise Promise 是目前前端异步编程的一个解决方案。
它解决了回调地狱的问题，规范了回调的名字和顺序，同时也方便了捕获错误。
一个 Promise 有三种状态：
pending：表示初始状态，既没有成功，也没有失败
fulfilled 表示操作成功完成
rejected 表示操作失败。
创建一个 Promise // 直接用Promise构造函数创建一个Promise对象 let promiseFn = new Promise((resolve,reject)=&amp;gt;{}) // 也可以在回调的异步函数的第一行加上下面这句代码 function promiseFn(){ return new Promise((resolve,reject)=&amp;gt;{...}) } Promise.then() Promise.then()接受两个回调函数，第一个为成功回调，第二个为失败回调。
var p1 = new Promise((resolve, reject) =&amp;gt; { resolve(&amp;#34;成功！&amp;#34;); // or  // reject(new Error(&amp;#34;出错了！&amp;#34;)); }); p1.then( (value) =&amp;gt; { console.log(value); // 成功！  }, (reason) =&amp;gt; { console.error(reason); // 出错了！  } ); Promise.all() 接受多个 Promise 组成的可迭代对象，比如数组。返回结果是一个新的 Promise 对象。</description>
    </item>
    
    <item>
      <title>Let和const在for循环中的运用</title>
      <link>https://chow1027.xyz/2019/let%E5%92%8Cconst%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</link>
      <pubDate>Wed, 27 Nov 2019 06:12:07 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/let%E5%92%8Cconst%E5%9C%A8for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</guid>
      <description>一些文章 let const 缓存 for 循环的中间变量
let 和 const 在 for 循环中的使用
正文 问题的根源起源于手写 jQuery 的过程中用到的代码：
find(selector) { let array = [] for (let i = 0; i &amp;lt; elements.length; i++) { const elements2 = Array.from(elements[i].querySelectorAll(selector)) array = array.concat(elements2) } array.oldApi = this return jQuery(array) } const 关键字定义的变量不能被重新赋值，那它为什么可以出现在 for 循环中？
let 当我们在 for 循环中使用 let 时，每一次的迭代都会重新声明一次变量。比如for(let i = 0; i &amp;lt; 10; i++)
i 变量被声明了 10 次，每一次赋的值为上一次迭代完成时的值，
这样的话，循环体内获取到的 i，每次也都是全新的变量 i，而不是像使用 var 声明时得到的是全局变量，并且每一次迭代完成后，i 变量就消失了。</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>https://chow1027.xyz/2019/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Mon, 18 Nov 2019 15:18:59 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>一些文章 &amp;mdash;以下文档部分转载自知乎文章《从一道面试题-计时器函数谈闭包》，作者：胡桃夹子
文章地址：https://zhuanlan.zhihu.com/p/80117819
正文 /*********************/ let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } /*********************/ 上述代码会打印出 6 个 6。
为什么不是 0、1、2、3、4、5？
原因是
setTimeout 是一个计时器，设置时间为 0 秒。（计时 0 秒，相当于是马上要执行）
setTimeout 是从队列结束的时候开始计时的，如果前面的进程没有结束，那么要等到前面的进程结束后才开始计时。在这里的任务队列就是它自己所在的循环。
意思是，执行完当前的代码之后立即执行计时器中的代码。而上面的&amp;quot;当前代码&amp;quot;就是指 for 循环。
在 for 循环执行完毕后，此时的 i 值等于 6，才轮到 setTimeout 异步执行箭头函数。
6 个 setTimeout 打印出当前的 i 值，执行结果就是打印 6 个 6。
为了更好的理解，这里可以想象一个小场景。
 for 循环想让 setTimeout 打印点东西，他说：boss 给了我个任务，这个 i 是我第一次执行的结果，你打印给 boss 看看呗。(此时 i=0)
setTimeout 说：好的。然后他在便利贴上写道：打印 i 给老板看，放在了一边。（这里的 i 没有写明具体值）</description>
    </item>
    
    <item>
      <title>JS对象</title>
      <link>https://chow1027.xyz/2019/js%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 16 Nov 2019 14:41:49 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/js%E5%AF%B9%E8%B1%A1/</guid>
      <description>JavaScript 的其中数据类型：四基两空一对象。
今天我们来聊一聊对象 Object，以及原型是什么？
唯一的复杂类型——Object //常用写法： let obj = {&amp;#39;name&amp;#39;:&amp;#39;xxx&amp;#39;,&amp;#39;age&amp;#39;:&amp;#39;xxx&amp;#39;,} //正规写法 let obj = new Object({&amp;#39;name&amp;#39;:&amp;#39;xxx&amp;#39;,&amp;#39;age&amp;#39;:&amp;#39;xxx&amp;#39;}) //匿名对象 console.log({&amp;#39;name&amp;#39;:&amp;#39;xxx&amp;#39;,&amp;#39;age&amp;#39;:&amp;#39;xxx&amp;#39;}) 注意：
 键名是字符串，可以包含任何字符； &amp;lsquo;&amp;lsquo;可以省略，但是省略后只能写标识符和数字；（所以为什么要省略它呢？写上！） 对象没有所谓的数字下标，要得到对象中的某个值，只能通过它的键名获取。 对象中的键值对又称为这个对象的属性。  let obj={ 1e2:&amp;#39;一百&amp;#39; } /*******结果是********/ obj = {&amp;#39;100&amp;#39;:&amp;#39;一百&amp;#39;} 如果对象的键是一个表达式，那么 JavaScript 会将该表达式求值，并将结果转换为字符串。
提问：字符串是一个常量，我能不能用变量的值作为 Object 的键呢？ 答案是肯定的。
怎么做？
用&amp;rsquo;[]&amp;lsquo;将变量名包裹起来
let a = &amp;#39;xxx&amp;#39; var obj = { [a] = &amp;#39;hello&amp;#39; } /*******结果是********/ obj = {&amp;#39;xxx&amp;#39;:&amp;#39;hello&amp;#39;} 同上面表达式的原理类似，JavaScript 会先得到变量的值，再转为字符串。
Object 中的增删查改 删除属性 delete obj.xxx 或 delete obj[&amp;lsquo;xxx&amp;rsquo;] ——删除 obj 对象的 xxx 属性</description>
    </item>
    
    <item>
      <title>JS基本语法</title>
      <link>https://chow1027.xyz/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 15 Nov 2019 06:40:40 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>表达式和语句 表达式和语句的 &amp;ldquo;一般&amp;rdquo; 区别  表达式一般有值，语句可能有或没有； 语句一般会改变环境（声明、赋值等） 上述区别并不绝对。  关于值和返回值
只有函数（表达式）才有返回值的概念。比如：
 1+2的值是 3； add(1,2）表达式的值为函数的返回值 console.log表达式的值为函数本身 console.log(3)表达式的值为 undefined（console.log 没有返回值，打印出&amp;quot;3&amp;quot;是它的功能）  注意事项  JavaScript 中区分大小写； 大部分空格没有意义； 大部分回车没有意义（除了 return，return 后面不能随便回车，否则 JavaScript 会自动在 return 后面补上&amp;rdquo;;&amp;quot;）  标识符 命名规则
第一个字符后面可以接 Unicode 字符、&amp;quot;$&amp;quot;符号、&amp;quot;_&amp;ldquo;符号和中文，之后的字符除了这些之外，还可以是数字。
注释 多行注释 &amp;ldquo;/**/&amp;rdquo;
单行注释 &amp;ldquo;//&amp;rdquo;
好的注释：
/踩坑注解/
/为什么代码写的这么奇怪，遇到了什么 bug/
条件语句 if&amp;hellip;else&amp;hellip; /************************/ if(表达式){ 语句1 }eles{ 语句2 } /************************/ if(表达式){ 语句1 }eles if{ 语句2 }else{ 语句3 } /************************/ function fn(){ if(){ return 表达式 } if(){ return 表达式 } return 表达式 } /************************/ 注意</description>
    </item>
    
    <item>
      <title>JavaScript的个人简历</title>
      <link>https://chow1027.xyz/2019/javascript%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</link>
      <pubDate>Wed, 13 Nov 2019 21:30:08 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/javascript%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</guid>
      <description>Javascript：我怎么来的？ JavaScript 诞生于网景公司（Mosaic Communications）。
网景公司希望它们的浏览器能与使用者互动，要达成这一目的，他们需要一种网页脚本语言。
用什么语言来达成这一目的？要么，用当时现有的语言：python、perl、Scheme 等；要么，开发一门新的语言。当时的网景公司分成了两派。
而同年发生了一件大事，Sun 公司将 Oak 语言改名为 Java，正式向市场推出，&amp;ldquo;一次编写，到处运行&amp;quot;的宣传语，使得 Java 很有可能成为未来的主宰。
网景公司看到了机会，决定与 Sun 公司结成联盟。它不仅允许 Java 程序以 applet（小程序）的形式，直接在浏览器中运行；甚至还考虑直接将 Java 作为脚本语言嵌入网页，只是因为这样会使 HTML 网页过于复杂，后来才不得不放弃。
总之，当时的形势就是，网景公司的整个管理层，都是 Java 语言的信徒，Sun 公司完全介入网页脚本语言的决策。因此，Javascript 后来就是网景和 Sun 两家公司一起携手推向市场的，这种语言被命名为&amp;quot;Java+script&amp;quot;并不是偶然的。
决定开发一种看上去与 Java 足够相似，但是比 Java 简单，使得非专业的网页作者也能很快上手的语言。为了使&amp;quot;开发新语言&amp;quot;这个提案站稳脚跟，这一种语言必须尽快出现，布兰登当时被指定为这门语言的设计师。
布兰登的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将 Scheme 语言作为网页脚本语言的可能性。
而且，布兰登看不起 Java。
1995 年 5 月，布兰登仅花了 10 天时间就把这个拙劣的语言原型设计出来了。最初命名为 Mocha，1995 年 9 月在 Netscape Navigator 2.0 的 Beta 版中改名为 LiveScript，同年 12 月，Netscape Navigator 2.0 Beta 3 中部署时被重命名为 JavaScript。
 布兰登的设计思路：
（1）借鉴 C 语言的基本语法；</description>
    </item>
    
  </channel>
</rss>