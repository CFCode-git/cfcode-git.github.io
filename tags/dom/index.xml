<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOM on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/tags/dom/</link>
    <description>Recent content in DOM on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Dec 2019 19:43:20 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/tags/dom/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>事件流与事件委托</title>
      <link>https://chow1027.xyz/2019/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Sun, 08 Dec 2019 19:43:20 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>事件流 事件流就是页面中的元素接受事件的顺序。
可以分为事件冒泡流、事件捕获流。
事件冒泡流 &amp;amp;&amp;amp; 事件捕获流 事件冒泡流是从事件开始的具体元素，逐级往上传播到较为不具体的节点。
最外面的节点是 window！！！！
比如
&amp;lt;body&amp;gt; &amp;lt;div&amp;gt; &amp;lt;p&amp;gt;here&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; 当点击 p 元素时，事件冒泡流的传播顺序是：
p &amp;gt; div &amp;gt; body &amp;gt; html &amp;gt; document &amp;gt; window
事件捕获流与事件冒泡流恰好相反，它的传播顺序是：
window &amp;gt; document &amp;gt; html &amp;gt; body &amp;gt; div &amp;gt; p
在事件到达预定目标之前捕获它。
DOM 二级事件 DOM 二级事件规定：事件流分为三个阶段：事件捕获阶段，处于目标阶段，事件冒泡阶段。
首先发生事件捕获，事件在到达目标后停止。 然后是处于目标，事件在目标上发生，并在事件处理中被看成是冒泡阶段的一部分，最后事件再冒泡传播至 document。
什么是事件委托？ 每一个函数都是一个对象，都会占用内存。内存中的对象越多，性能就越差，事件处理程序过多的解决方案就是事件委托。
把原本需要绑定在子元素的响应事件委托给它的父元素，让父元素承担监听事件的任务。
事件委托的原理就是利用了事件冒泡。
比如有这么个结构：div &amp;gt; ul &amp;gt; li &amp;gt; a，我们可以给 div 添加点击事件，那么当 div 中的 ul、li、a 做点击事件的时候，会冒泡到最外层的 div，触发 div 上的点击事件。
举例说明：</description>
    </item>
    
  </channel>
</rss>