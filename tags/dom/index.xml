<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOM on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/tags/dom/</link>
    <description>Recent content in DOM on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Dec 2019 19:43:20 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/tags/dom/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DOM事件相关</title>
      <link>https://chow1027.xyz/2019/dom%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 08 Dec 2019 19:43:20 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/dom%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/</guid>
      <description>什么是事件委托？ 事件委托的原理是事件冒泡。 js的事件流分为三个阶段：事件捕获、目标阶段、事件冒泡。 捕获阶段：事件开始由不太具体的节点接收，然后逐级向下传播到最具体的节点。 目标阶段：在目标节点上触发。 冒泡阶段：事件开始由最具体的元素接收，然后逐级向上传播到较为不具体的节点（或文档）
所谓事件委托就是把原本需要绑定在子元素的响应事件委托给它的父元素，让父元素承担监听事件的任务。 比如有这么个结构：div &amp;gt; ul &amp;gt; li &amp;gt; a，我们可以给div添加点击事件，那么当div中的ul、li、a做点击事件的时候，会冒泡到最外层的div，触发div上的点击事件。
举例说明：
&amp;lt;ul id = &#39;list&#39;&amp;gt; &amp;lt;li&amp;gt;item 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;item 2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;item 3&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;item 4&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 实现一个功能：点击li，弹出&amp;rsquo;1234&amp;rsquo; 如果不用事件委托，我们需要把点击后弹出&amp;rsquo;1234&#39;这个事件委托给每一个li
window.onload = () =&amp;gt; { let ul1 = document.querySelector(&#39;#list&#39;) let lis = ul1.getElementsByTagName(&#39;li&#39;) for(let i=0; i&amp;lt;lis.length; i++){ lis[i].onclick = () =&amp;gt; { alert(&#39;1234&#39;) } } } 如果用事件委托，我们只需把事件委托给ul即可
window.onload = () =&amp;gt; { let ul1 = document.querySelector(&#39;#list&#39;) ul1.onclick = () =&amp;gt; { alert(&#39;1234&#39;) } } 当li被点击时，由于事件冒泡原理，事件会传递给li的父元素ul，ul上挂着的事件就会触发。</description>
    </item>
    
  </channel>
</rss>