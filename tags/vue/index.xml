<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 呆尬猴的博客</title>
    <link>https://chow1027.xyz/tags/vue/</link>
    <description>Recent content in Vue on 呆尬猴的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Apr 2020 00:20:52 +0800</lastBuildDate>
    
	<atom:link href="https://chow1027.xyz/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue单向数据流与双向绑定</title>
      <link>https://chow1027.xyz/2020/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%90%97/</link>
      <pubDate>Fri, 24 Apr 2020 00:20:52 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2020/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%90%97/</guid>
      <description>单向绑定 &amp;amp; 双向绑定 单双向绑定，指的是 View 层与 Model 层之间的映射关系。
React React 采用单向绑定：用户访问 view，通过 dispatch 一个 action 对 state 进行更改，state 更新后触发 View 更新反馈给用户。
这就是单向绑定，View =&amp;gt; Action =&amp;gt; State =&amp;gt; View，View 不能直接修改 State。
Vue Vue 支持单向绑定：比如插值{{data}}，比如 v-bind
那你说 v-model 呢?
Vue 用 v-model 实现了双向绑定。
&amp;lt;input v-model=&amp;#34;something&amp;#34; /&amp;gt; 数据的流动方向： data 中的 something =&amp;gt; input 的 value =&amp;gt; 用户输入 =&amp;gt; 触发 input 事件 =&amp;gt; 被 Vue 实例监听到 =&amp;gt; 更新 data 中的 something。
v-model 是语法糖，上面可以写成
&amp;lt;input v-bind:value=&amp;#34;something&amp;#34; @input=&amp;#34;something = $event.</description>
    </item>
    
    <item>
      <title>Vue:数据响应式</title>
      <link>https://chow1027.xyz/2019/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</link>
      <pubDate>Fri, 20 Dec 2019 20:56:13 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</guid>
      <description>前言 先说两个基本的认识
响应式：若某个东西能对外界的变化(刺激)做出反应，那么他就是响应式的。
比如响应式页面，就是当我们改变窗口的大小时，网页内容会根据窗口的大小做出反应(调整)的页面。
数据响应式：
Vue 的 data 是响应式的。比如const vm = new Vue({data:{n:0}})，
如果修改 vm.n(或 data.n)，那么页面中的 n 就会作出响应，渲染为对应的 n 或者经过一些数据处理后的 n。
这就是响应式
Vue2 通过 Object.defineProperty 实现数据响应式。
接下来，先理解下面两个 ES6 语法，有助于本文的阅读。
1. getter/setter
现有如下对象
let obj = { firstName: &amp;#34;张&amp;#34;, lastName: &amp;#34;三&amp;#34;, name() { return this.firstName + this.lastName; }, }; console.log(obj.name()); // 张三 通过调用obj 的 name 函数就可以得到这个对象的姓名。
 getter/setter  let obj = { firstName:&amp;#39;张&amp;#39;, lastName:&amp;#39;三&amp;#39;, get name(){ return this.firstName + this.lastName }, set name(arr){ this.</description>
    </item>
    
    <item>
      <title>如何理解Vue的.Sync修饰符</title>
      <link>https://chow1027.xyz/2019/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Fri, 20 Dec 2019 20:56:13 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>有时候我们可能需要对一个 prop 进行双向绑定，但真正的双向绑定会带来维护上的问题。
因为子组件可以修改父组件，且在子组件和父组件都没有明显的改动来源。
因此 Vue 推荐以update:myPropName的模式触发事件取代双向绑定。
具体做法就是：首先在子组件中用$emit 传递参数。
&amp;quot;update:title&amp;quot;是事件名，newTitle 是传递给父组件的参数。// 子组件 this.$emit(&amp;#39;update:title&amp;#39;,newTitle) 然后在父组件监听&amp;quot;update:title&amp;quot;事件，根据需要更新父组件上的数据属性。
// 父组件 &amp;lt;text-document v-bind:title=&amp;#34;doc.title&amp;#34; v-on:update:title=&amp;#34;doc.title=$event&amp;#34;&amp;gt; &amp;lt;/text-document&amp;gt; 上面的模式很常见，于是 Vue 给这种模式提供给了缩写，就是.sync 修饰符。
// 父组件 &amp;lt;text-document :title.sync=&amp;#34;doc.title&amp;#34;&amp;gt;&amp;lt;/text-document&amp;gt; // 相当于 //&amp;lt;text-document // v-bind:title=&amp;#34;doc.title&amp;#34; // v-on:update:title=&amp;#34;doc.title=$event&amp;#34;&amp;gt; //&amp;lt;/text-document&amp;gt; 当我们需要在子组件上修改 props 传递的数据时，不能直接修改，而是要通过.sync 修饰符，通知父组件修改。
案例 比如设想一个这样的场景：爸爸给儿子钱，儿子要花钱。
父亲组件
首先，爸爸要告诉儿子自己有多少钱（用 v-bind:），同时爸爸要儿子在花完钱之后(v-on:&amp;lsquo;儿子花钱事件&amp;rsquo;)，把余额还给自己(用$event)
&amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;father&amp;#34;&amp;gt; 我现在有 {{fatherMoney}} &amp;lt;/div&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;Child :money=&amp;#34;fatherMoney&amp;#34; v-on:update:money=&amp;#34;fatherMoney = $event&amp;#34; /&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import Child from &amp;#34;./Child.vue&amp;#34;; export default{ data(){ return {fatherMoney:10000}; }, components:{Child:Child} }; &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .</description>
    </item>
    
    <item>
      <title>Vue:完整版和非完整版</title>
      <link>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</link>
      <pubDate>Thu, 19 Dec 2019 20:51:28 +0800</pubDate>
      
      <guid>https://chow1027.xyz/2019/vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88/</guid>
      <description>Vue 有两个版本，完整版和非完整版，非完整版也称为运行时版本。
完整版的文件名为：vue.js；非完整版的文件名为 vue.runtime.js；这两个文件里面包含了注释。
如果是在生产环境，我们可以使用 vue.min.js 和 vue.runtime.min.js，这是完整版和非完整版去除了注释以及压缩后的版本，相对于原来体积会变小。
完整版 VS 非完整版 完整版 = 运行时 + 编译器 compiler
由于编译器的存在，完整版比运行时版本体积大 40%左右。
编译器干嘛的？？
完整版 Vue 内置了编译器，它可以直接从 HTML 获取元素，得到视图。
比如
new Vue({ el: &amp;#34;#app&amp;#34;, }); 就可以得到这个 HTML 中 id 为 app 的节点，
或者通过 template
new Vue({ el: &amp;#34;#app&amp;#34;, template: ` &amp;lt;div&amp;gt;{{n}}&amp;lt;/div&amp;gt; `, data: { n: 0, }, }); 如果使用非完整版，我们要使用 JS 构建视图，在 render 函数里面用 h 创建标签。
比如：
new Vue({ el:&amp;#39;#app&amp;#39;, render(h){ return h(&amp;#39;div&amp;#39;,this.n) }, data:{ n:0 } }) h 相当于 createElement，render 函数返回了一个 div 节点，里面的内容是 n。</description>
    </item>
    
  </channel>
</rss>